{"version":3,"sources":["components/auth.js","components/protectedRoute.js","components/landingPage/landingPage.js","components/welcomePage/welcomePage.js","App.js","serviceWorker.js","index.js"],"names":["auth","Auth","Object","classCallCheck","this","authenticated","cb","ProtectedRoute","_ref","Component","component","rest","objectWithoutProperties","react_default","a","createElement","Route","assign","render","props","isAuthenticated","Redirect","to","pathname","state","from","location","LandingPage","_this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","_this2","onClick","login","history","push","WelcomePage","logout","App","Switch","exact","path","protectedRoute_ProtectedRoute","Boolean","window","hostname","match","ReactDOM","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAoBiBA,EAAA,eAnBb,SAAAC,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GACbG,KAAKC,eAAgB,oDAGjBC,GACJF,KAAKC,eAAgB,EACrBC,mCAGKA,GACLF,KAAKC,eAAgB,EACrBC,8CAIA,OAAOF,KAAKC,wBCZLE,EAAiB,SAAAC,GAAuC,IAAzBC,EAAyBD,EAApCE,UAAyBC,EAAWT,OAAAU,EAAA,EAAAV,CAAAM,EAAA,eACnE,OACEK,EAAAC,EAAAC,cAACC,EAAA,EAADd,OAAAe,OAAA,GACMN,EADN,CAEEO,OAAQ,SAAAC,GACN,OAAInB,EAAKoB,kBACAP,EAAAC,EAAAC,cAACN,EAAcU,GAGpBN,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACEC,GAAI,CACFC,SAAU,IACVC,MAAO,CACLC,KAAMN,EAAMO,kBC2CfC,cA9CX,SAAAA,EAAYR,GAAM,IAAAS,EAAA,OAAA1B,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,IACdC,EAAA1B,OAAA2B,EAAA,EAAA3B,CAAAE,KAAAF,OAAA4B,EAAA,EAAA5B,CAAAyB,GAAAI,KAAA3B,KAAMe,KAmBNa,kBAAoB,aApBNJ,wEA2BT,IAAAK,EAAA7B,KACL,OACIS,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,UAAQmB,QAAS,WACblC,EAAKmC,MAAM,WACPF,EAAKd,MAAMiB,QAAQC,KAAK,UAFhC,mBAjCM5B,aCiBX6B,cAvBX,SAAAA,EAAYnB,GAAQ,OAAAjB,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,GAAApC,OAAA2B,EAAA,EAAA3B,CAAAE,KAAAF,OAAA4B,EAAA,EAAA5B,CAAAoC,GAAAP,KAAA3B,KACVe,0EAGD,IAAAS,EAAAxB,KACL,OACIS,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,UAAQmB,QAAS,WACblC,EAAKuC,OAAO,WACRX,EAAKT,MAAMiB,QAAQC,KAAK,SAFhC,oBAVM5B,aCkBX+B,mLAbX,OACE3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACE5B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAO0B,OAAK,EAACC,KAAK,IAAIjC,UAAWiB,IACjCd,EAAAC,EAAAC,cAAC6B,EAAD,CAAgBF,OAAK,EAACC,KAAK,KAAKjC,UAAW4B,IAE3CzB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAO2B,KAAK,IAAIjC,UAAW,iBAAI,4BARvBD,aCGEoC,QACW,cAA7BC,OAAOpB,SAASqB,UAEe,UAA7BD,OAAOpB,SAASqB,UAEhBD,OAAOpB,SAASqB,SAASC,MACvB,uECTNC,IAAS/B,OAAOL,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KAAerC,EAAAC,EAAAC,cAACoC,EAAD,OAAyBC,SAASC,eAAe,SDwH1E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2d076930.chunk.js","sourcesContent":["class Auth {\n    constructor() {\n      this.authenticated = false;\n    }\n  \n    login(cb) {\n      this.authenticated = true;\n      cb();\n    }\n  \n    logout(cb) {\n      this.authenticated = false;\n      cb();\n    }\n  \n    isAuthenticated() {\n      return this.authenticated;\n    }\n  }\n  \n  export default new Auth();","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport auth from \"./auth\";\n\nexport const ProtectedRoute = ({ component: Component, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={props => {\n        if (auth.isAuthenticated()) {\n          return <Component {...props} />;\n        } else {\n          return (\n            <Redirect\n              to={{\n                pathname: \"/\",\n                state: {\n                  from: props.location\n                }\n              }}\n            />\n          );\n        }\n      }}\n    />\n  );\n};\n","import React, { Component } from 'react';\n\nimport auth from '../auth';\n// import StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\"\n// import fireBase from 'firebase';\n\n\n// fireBase.initializeApp({\n//     apiKey: \"AIzaSyD1C9Nn6MOuAuQNDKXXvT5rdePgp97F-dQ\",\n//     authDomain: \"socialauth-95094.firebaseapp.com\",\n//   });\n\n\nclass LandingPage extends Component {\n    constructor(props){\n        super(props);\n        // state = { isSignedIn: false }\n\n\n        // uiConfig = {\n        //     signInFlow: \"popup\",\n        //     signInOptions: [\n        //       fireBase.auth.GoogleAuthProvider.PROVIDER_ID,\n        //       fireBase.auth.FacebookAuthProvider.PROVIDER_ID,\n        //       fireBase.auth.TwitterAuthProvider.PROVIDER_ID,\n        //       // fireBase.auth.GithubAuthProvider.PROVIDER_ID,\n        //       fireBase.auth.EmailAuthProvider.PROVIDER_ID\n        //     ],\n        //     callbacks: {\n        //       signInSuccess: () => false\n        //     }\n        //   }\n        }\n\n        componentDidMount = () => {\n            // fireBase.auth().onAuthStateChanged(user => {\n            //   this.setState({ isSignedIn: !!user })\n            //   console.log(\"user\", user)\n            // })\n          }\n\n    render() {\n        return (\n            <div>\n                <center>\n                    <h1>Landing Page</h1>\n                    <button onClick={() => {\n                        auth.login(() => {\n                            this.props.history.push(\"/w\");\n                        });\n                    }\n                    }>Log-in</button>\n                </center>\n\n            </div>\n        );\n    }\n}\n\n\nexport default LandingPage;","import React, { Component } from 'react';\n\n\nimport auth from '../auth';\n\n\nclass WelcomePage extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div>\n                <center>\n                    <h1>Welcome Page</h1>\n                    <button onClick={() => {\n                        auth.logout(() => {\n                            this.props.history.push(\"/\");\n                        });\n                    }\n                    }>Log-out</button>\n                </center>\n\n            </div>\n        );\n    }\n}\n\n\nexport default WelcomePage;","import React, { Component } from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport {ProtectedRoute} from './components/protectedRoute';\n\nimport LandingPage from './components/landingPage/landingPage';\nimport WelcomePage from './components/welcomePage/welcomePage';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Switch> \n          <Route exact path='/' component={LandingPage} />\n          <ProtectedRoute exact path='/w' component={WelcomePage} />\n\n          <Route path='*' component={()=>'404 Not Found'} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {BrowserRouter} from 'react-router-dom'\n\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}